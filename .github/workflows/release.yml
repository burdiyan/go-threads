name: Release
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  release-linux:
    name: Release Linux
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: Check out code
        uses: actions/checkout@v1
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Get dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          export PATH=${PATH}:`go env GOPATH`/bin
          go get -v -t -d ./...
      - name: Install gox
        run: |
             export PATH=${PATH}:`go env GOPATH`/bin
             go get github.com/mitchellh/gox  
      - name: Compile
        run: |
              export PATH=${PATH}:`go env GOPATH`/bin
              echo $(which gox)
              COMMIT="test"
              SUMMARY="test"
              DATE=$(date --iso-8601=seconds)
              FLAGS="-X github.com/textileio/go-threads/common.GitSummary=${SUMMARY} -X github.com/textileio/go-textile/common.BuildDate=${DATE} -X github.com/textileio/go-textile/common.GitCommit=${COMMIT} -X github.com/textileio/go-textile/common.GitBranch=${GITHUB_REF##*/} -X github.com/textileio/go-textile/common.GitState=clean"
              echo $FLAGS
              gox -ldflags="-w $FLAGS" -osarch="linux/amd64 linux/386 linux/arm" -output="threadsd-{{.OS}}-{{.Arch}}" ./threadsd
              gox -ldflags="-w $FLAGS" -osarch="linux/amd64 linux/386 linux/arm" -output="threads-{{.OS}}-{{.Arch}}" ./threads
              echo $(ls ./)
      - name: Collect artifacts
        run: |
          VERSION="test"
          OUT=~/dist/cli
          mkdir -p ${OUT}
          mkdir -p tmp
          cp LICENSE tmp/
          cp dist/README.md tmp/
          cp dist/install tmp/
          cd tmp
          declare -a arr=("linux-amd64" "linux-386" "linux-arm")
          for i in "${arr[@]}"
          do
              OSARCH=${i%.*}
              EXT=$([[ "$i" = *.* ]] && echo ".${i##*.}" || echo '')
              cp ../threadsd-${i} threadsd${EXT}
              cp ../threads-${i} threads${EXT}
              if [ "${EXT}" == ".exe" ]; then
                  zip go-threads_${VERSION}_${OSARCH}.zip LICENSE README.md install threadsd${EXT}
                  mv go-threads_${VERSION}_${OSARCH}.zip ${OUT}/
              else
                  tar -czvf go-threads_${VERSION}_${OSARCH}.tar.gz LICENSE README.md install threadsd${EXT}
                  mv go-threads_${VERSION}_${OSARCH}.tar.gz ${OUT}/
              fi
          done
          cd .. && rm -rf tmp
      # - name: Upload multiple assets to release
      #   uses: radiusnetworks/release-asset-action@v1
      #   with:
      #     files: |
      #       first.zip
      #       second.zip
      #       third.tar.gz
      #     github-token: ${{ secrets.GITHUB_TOKEN }}




